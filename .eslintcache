[{"/Users/heyfei7/Documents/Projects/VSC/heyfei7/src/index.js":"1","/Users/heyfei7/Documents/Projects/VSC/heyfei7/src/App.js":"2","/Users/heyfei7/Documents/Projects/VSC/heyfei7/src/reportWebVitals.js":"3","/Users/heyfei7/Documents/Projects/VSC/heyfei7/src/common/util.js":"4","/Users/heyfei7/Documents/Projects/VSC/heyfei7/src/components/Section.js":"5","/Users/heyfei7/Documents/Projects/VSC/heyfei7/src/views/diana/Diana.js":"6","/Users/heyfei7/Documents/Projects/VSC/heyfei7/src/views/orange-store/OrangeStore.js":"7"},{"size":521,"mtime":1610547516514,"results":"8","hashOfConfig":"9"},{"size":2571,"mtime":1610553553289,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1610331009807,"results":"11","hashOfConfig":"9"},{"size":1714,"mtime":1610553421893,"results":"12","hashOfConfig":"9"},{"size":271,"mtime":1610487291184,"results":"13","hashOfConfig":"9"},{"size":9713,"mtime":1610555404140,"results":"14","hashOfConfig":"9"},{"size":7564,"mtime":1610506678215,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"w0p1bb",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"/Users/heyfei7/Documents/Projects/VSC/heyfei7/src/index.js",[],["33","34"],"/Users/heyfei7/Documents/Projects/VSC/heyfei7/src/App.js",["35","36"],"/Users/heyfei7/Documents/Projects/VSC/heyfei7/src/reportWebVitals.js",[],"/Users/heyfei7/Documents/Projects/VSC/heyfei7/src/common/util.js",["37","38","39","40"],"/Users/heyfei7/Documents/Projects/VSC/heyfei7/src/components/Section.js",[],["41","42"],"/Users/heyfei7/Documents/Projects/VSC/heyfei7/src/views/diana/Diana.js",["43","44"],"/Users/heyfei7/Documents/Projects/VSC/heyfei7/src/views/orange-store/OrangeStore.js",["45","46"],"import \"./OrangeStore.css\"\nimport { getIcon } from '../../common/util.js';\n\n// React-Bootstrap\nimport { useState } from 'react';\nimport { Row, Col, Carousel, Badge, Collapse, Dropdown } from 'react-bootstrap';\nimport { CaretDownFill, CaretUpFill, StarFill } from 'react-bootstrap-icons';\nimport Container from 'react-bootstrap/Container';\nimport Image from 'react-bootstrap/Image'\nimport Card from 'react-bootstrap/Card'\n\nconst colours = {\n\n}\n\nfunction ToggleSection(props) {\n    const [show, setShow] = useState(true);\n    return (\n        <Card\n            id={props.id}\n            className=\"orange-store section toggle-section\">\n            <Card.Header\n                className=\"text-center pointer\"\n                onClick={() => setShow(!show)}\n                aria-controls={props.id + \"-body\"}\n                aria-expanded={show}>\n                {props.title + \" \"}\n                {show && <CaretUpFill />}\n                {!show && <CaretDownFill />}\n            </Card.Header>\n            <Collapse in={show}>\n                <Card.Body id={props.id + \"body\"}>\n                    {props.children}\n                </Card.Body>\n            </Collapse>\n        </Card>\n    )\n}\n\nfunction Section(props) {\n    return (\n        <Card\n            id={props.id}\n            className=\"orange-store section\">\n            {\n                props.title &&\n                <Card.Header\n                    className=\"text-center\">\n                    <Row>\n                        <Col xs={12}>{props.title}</Col>\n                    </Row>\n                </Card.Header>\n            }\n            <Card.Body id={props.id + \"body\"}>\n                {props.children}\n            </Card.Body>\n        </Card >\n    )\n}\n\nfunction AboutMe(props) {\n    const ContactMe = (props) => {\n        return (\n            <Dropdown>\n                <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\n                    Connect\n            </Dropdown.Toggle>\n                <Dropdown.Menu>\n                    {\n                        props.contacts &&\n                        props.contacts.length > 0 &&\n                        props.contacts.map((contact) => {\n                            if (contact.link) {\n                                return (\n                                    <Dropdown.Item href={contact.link} key={contact.title}>\n                                        {getIcon(contact.icon)}\n                                        {\" \" + contact.title}\n                                    </Dropdown.Item>\n                                )\n                            }\n                        })\n                    }\n                </Dropdown.Menu>\n            </Dropdown>\n        )\n    }\n\n    return (\n        <Card id=\"about-me\" className=\"orange-store section\">\n            <Card.Header>\n                <Row>\n                    <Col xs={3} md={3}>\n                        <Image\n                            src={process.env.PUBLIC_URL + \"/images/icon.jpeg\"}\n                            style={{ \"width\": \"inherit\", \"height\": \"inherit\" }}\n                            rounded />\n                    </Col>\n                    <Col xs={9} md={7}>\n                        <h1>Fei Dong</h1>\n                        <p>Web Developer | Software Programmer | Writer</p>\n                        <p>Toronto, ON</p>\n                    </Col>\n                    <Col xs={6} md={1}><ContactMe contacts={props.contacts} /></Col>\n                </Row>\n            </Card.Header>\n        </Card>\n    )\n}\n\nfunction MyWork(props) {\n    const WorkItem = (item) => {\n        const workTitle = item.title + \" @\" + item.company;\n        return (\n            <Carousel.Item key={workTitle}>\n                <Card>\n                    <Card.Body style={{ \"height\": \"100px\", \"background-color\": \"black\" }}>\n                        <Card.Title>{workTitle}</Card.Title>\n                    </Card.Body>\n                </Card>\n            </Carousel.Item>\n        )\n    }\n\n    return (\n        <Section id=\"my-work\" >\n            <Carousel>\n                {\n                    props.work &&\n                    props.work.length > 0 &&\n                    props.work.map(WorkItem)\n                }\n            </Carousel>\n        </Section>\n    )\n}\n\nfunction MySkills(props) {\n    const [state, setState] = useState({ \"frontend\": true, \"backend\": true, \"os\": false, \"others\": false, \"database\": false });\n\n    const setKeyValue = (key, value) => {\n        var tmpState = {};\n        tmpState[key] = value;\n        setState((Object.assign({}, state, tmpState)));\n    }\n\n    const Stars = (props) => {\n        return (\n            <div>\n                {\n                    [...Array(props.level).keys()].map((key) => {\n                        return <StarFill key={key} />\n                    })\n                }\n            </div>\n        )\n    }\n\n    const SkillItem = (item) => {\n        if (state[item.type]) {\n            return (\n                <Col xs={4} md={3} key={item.name} className=\"text-center\" >\n                    {item.name}\n                    <Stars level={item.level} />\n                </Col>\n            )\n        }\n    }\n\n    return (\n        <ToggleSection id=\"my-skills\" title=\"Skills\">\n            {\n                Object.entries(state).map(([key, value]) => {\n                    return (\n                        <Badge pill\n                            className=\"pointer\"\n                            key={key}\n                            onClick={() => setKeyValue(key, !value)}\n                            variant={value ? \"info\" : \"light\"}>{key}</Badge>\n                    )\n                })\n            }\n            <Row>\n                {\n                    props.skills &&\n                    props.skills.length > 0 &&\n                    props.skills.map(SkillItem)\n                }\n            </Row>\n        </ToggleSection >\n    )\n}\n\nfunction MoreFromMe(props) {\n    const data = props.data.publications;\n\n    const MoreItem = (item) => {\n        return (\n            <Col xs={6} md={3}>\n                <Card style={{ \"height\": \"300px\" }}>\n                    <Card.Header>{item.title}</Card.Header>\n                </Card>\n            </Col>\n        )\n    }\n\n    return (\n        <ToggleSection title=\"More From Me\">\n            <Container>\n                <Row>\n                    {data && data.length > 0 && data.map(MoreItem)}\n                </Row>\n            </Container>\n        </ToggleSection>\n    )\n}\n\nfunction Footer(props) {\n    const data = {\n        \"Version\": \"1.0.1\",\n        \"Copyright\": \"2021\",\n        \"E-Mail\": \"feidong1998@gmail.com\",\n        \"Phone\": \"(647)-233-3048\"\n    }\n    return (\n        <Section>\n            <Container>\n                <Row>\n                    {Object.entries(data).map(([key, value]) => {\n                        return (\n                            <Col className=\"text-center\" key={key} xs={6} md={3}>\n                                <b>{key}</b>\n                                <br />\n                                {value}\n                            </Col>\n                        )\n                    })}\n                </Row>\n            </Container>\n        </Section>\n    )\n}\n\nfunction OrangeStoreView(props) {\n    return (\n        <Container className=\"view-root\">\n            <AboutMe contacts={props.data.contacts} />\n            <MyWork work={props.data.work} />\n            <MySkills skills={props.data.skills} />\n            <MoreFromMe data={props.data} />\n            <Footer />\n        </Container>\n    )\n}\n\nexport default OrangeStoreView;",{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":34,"column":36,"nodeType":"53","messageId":"54","endLine":34,"endColumn":38},{"ruleId":"51","severity":1,"message":"52","line":90,"column":15,"nodeType":"53","messageId":"54","endLine":90,"endColumn":17},{"ruleId":"55","severity":1,"message":"56","line":42,"column":47,"nodeType":"57","messageId":"58","endLine":42,"endColumn":53},{"ruleId":"55","severity":1,"message":"56","line":43,"column":57,"nodeType":"57","messageId":"58","endLine":43,"endColumn":63},{"ruleId":"55","severity":1,"message":"56","line":44,"column":47,"nodeType":"57","messageId":"58","endLine":44,"endColumn":53},{"ruleId":"55","severity":1,"message":"56","line":45,"column":43,"nodeType":"57","messageId":"58","endLine":45,"endColumn":49},{"ruleId":"47","replacedBy":"59"},{"ruleId":"49","replacedBy":"60"},{"ruleId":"51","severity":1,"message":"52","line":30,"column":68,"nodeType":"53","messageId":"54","endLine":30,"endColumn":70},{"ruleId":"51","severity":1,"message":"52","line":142,"column":68,"nodeType":"53","messageId":"54","endLine":142,"endColumn":70},{"ruleId":"61","severity":1,"message":"62","line":12,"column":7,"nodeType":"63","messageId":"64","endLine":12,"endColumn":14},{"ruleId":"65","severity":1,"message":"66","line":72,"column":54,"nodeType":"67","messageId":"68","endLine":72,"endColumn":56},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unreachable","Unreachable code.","BreakStatement","unreachableCode",["69"],["70"],"no-unused-vars","'colours' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]